{"ast":null,"code":"var _jsxFileName = \"/Users/powderlj/Desktop/Apprenticeship/capstone/client/src/components/cocktails/CocktailPage.js\";\nimport React from 'react';\nimport \"./CocktailTile.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CocktailPage = props => {\n  console.log(props);\n  console.log(props.cocktailIngredients); //const [enteredTitle, setEnteredTitle] = useState(\"\");\n  //const [enteredAmount, setEnteredAmount] = useState(\"\");\n  //const [enteredDate, setEnteredDate] = useState(\"\");\n  //const [userInput, setUserInput] = useState({\n  //    enteredTitle: \" \",\n  //    enteredAmount: \" \",\n  //    enteredDate: \" \",\n  //});\n  //const titleChangeHandler = (event) => {\n  //     setEnteredTitle(event.target.value);\n  //setUserInput({\n  //...userInput,\n  //enteredTitle:event.target.value,\n  //})\n  // };\n  //const amountChangeHandler = (event) => {\n  //     setEnteredAmount(event.target.value);\n  //OR\n  //setUserInput({\n  //    ...userInput,\n  //    enteredAmount:event.target.value,\n  //    });\n  //OR\n  //setUserInput((prevState) => {\n  //    return {...prevState, enteredTitle: event.target.value};\n  //});  //use this way when new state relies on the old value (counter)\n  //};\n  //const dateChangeHandler = (event) => {\n  //     setEnteredDate(event.target.value);\n  //setUserInput({\n  //    ...userInput,\n  //    enteredDate:event.target.value,\n  //    });\n  // };\n\n  /*const submitHandler = (event) => {\n      event.preventDefault();\n      \n      const expenseData = {\n          title: enteredTitle,\n          amount: +enteredAmount,\n          date: new Date(enteredDate),\n        };\n       props.onSaveExpenseData(expenseData); //passing expenseData as props to NewExpense\n      setEnteredTitle(\"\");//This will clear the data after entered by user to display empty form again\n      setEnteredAmount(\"\");\n      setEnteredDate(\"\");\n  };\n  */\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"new-expense__controls\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Ingredients\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: props.cocktailIngredients\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: props.instruction\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: props.onCancel,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n};\n\n_c = CocktailPage;\nexport default CocktailPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"CocktailPage\");","map":{"version":3,"sources":["/Users/powderlj/Desktop/Apprenticeship/capstone/client/src/components/cocktails/CocktailPage.js"],"names":["React","CocktailPage","props","console","log","cocktailIngredients","instruction","onCancel"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,oBAAP;;;AAEA,MAAMC,YAAY,GAAIC,KAAD,IAAW;AAE5BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,mBAAlB,EAJ4B,CAM5B;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACD;AACK;AACA;AACA;AACA;AACL;AAEC;AACD;AAEK;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACJ;AAEA;AACD;AACK;AACA;AACA;AACA;AACL;;AAEC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGI,sBAEI;AAAK,IAAA,SAAS,EAAC,uBAAf;AAAA,4BAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAII;AAAA,gBAAIH,KAAK,CAACG;AAAV;AAAA;AAAA;AAAA;AAAA,YAJJ,eAKI;AAAA,gBAAIH,KAAK,CAACI;AAAV;AAAA;AAAA;AAAA;AAAA,YALJ,eASA;AAAK,MAAA,SAAS,EAAC,sBAAf;AAAA,6BACI;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,OAAO,EAAEJ,KAAK,CAACK,QAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YATA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFJ;AAkBH,CAnFD;;KAAMN,Y;AAqFN,eAAeA,YAAf","sourcesContent":["import React from 'react';\nimport \"./CocktailTile.css\";\n\nconst CocktailPage = (props) => {\n\n    console.log(props);\n\n    console.log(props.cocktailIngredients);\n\n    //const [enteredTitle, setEnteredTitle] = useState(\"\");\n    //const [enteredAmount, setEnteredAmount] = useState(\"\");\n    //const [enteredDate, setEnteredDate] = useState(\"\");\n\n    //const [userInput, setUserInput] = useState({\n    //    enteredTitle: \" \",\n    //    enteredAmount: \" \",\n    //    enteredDate: \" \",\n    //});\n\n    //const titleChangeHandler = (event) => {\n   //     setEnteredTitle(event.target.value);\n        //setUserInput({\n        //...userInput,\n        //enteredTitle:event.target.value,\n        //})\n   // };\n\n    //const amountChangeHandler = (event) => {\n   //     setEnteredAmount(event.target.value);\n\n        //OR\n\n        //setUserInput({\n        //    ...userInput,\n        //    enteredAmount:event.target.value,\n        //    });\n\n        //OR\n\n        //setUserInput((prevState) => {\n        //    return {...prevState, enteredTitle: event.target.value};\n        //});  //use this way when new state relies on the old value (counter)\n    //};\n\n    //const dateChangeHandler = (event) => {\n   //     setEnteredDate(event.target.value);\n        //setUserInput({\n        //    ...userInput,\n        //    enteredDate:event.target.value,\n        //    });\n   // };\n\n    /*const submitHandler = (event) => {\n        event.preventDefault();\n        \n        const expenseData = {\n            title: enteredTitle,\n            amount: +enteredAmount,\n            date: new Date(enteredDate),\n          };\n\n        props.onSaveExpenseData(expenseData); //passing expenseData as props to NewExpense\n        setEnteredTitle(\"\");//This will clear the data after entered by user to display empty form again\n        setEnteredAmount(\"\");\n        setEnteredDate(\"\");\n    };\n*/\n    \n    return (\n   \n        <div className=\"new-expense__controls\">\n            \n            <p>Ingredients</p>\n            \n            <p>{props.cocktailIngredients}</p>\n            <p>{props.instruction}</p>\n           \n      \n        \n        <div className=\"new-expense__actions\">\n            <button type=\"button\" onClick={props.onCancel}>Cancel</button>\n            \n        </div>\n        </div>\n   \n    );\n};\n\nexport default CocktailPage;"]},"metadata":{},"sourceType":"module"}